{"version":3,"file":"static/js/407.4f550a54.chunk.js","mappings":"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","sources":["components/DateComp/DateComp.jsx","webpack://ITD-React-project/./src/components/Section/Section.module.scss?893f","components/Section/Section.jsx","webpack://ITD-React-project/./src/pages/StatisticsPage/StatisticsPage.module.scss?0652","pages/StatisticsPage/StatisticsPage.jsx","redux/transactions/transactionsSelector.js"],"sourcesContent":["\nimport { useEffect, useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './DateComp.scss';\nimport Icon from 'components/Icon/Icon';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getCategoriesStat,\n  getTransaction,\n} from 'redux/transactions/transactionsOperations';\nimport { useLocation } from 'react-router-dom';\nimport { selectorIsLoggedIn } from 'redux/auth/authSelectors';\nimport clsx from 'clsx';\nimport { getDynamicsByMonth } from 'redux/dynamics/dynamicsOperations';\n\nconst months = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nconst DateComp = () => {\n  const dispatch = useDispatch();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const isLoggedIn = useSelector(selectorIsLoggedIn);\n  const location = useLocation();\n\n  const isDynamicsPage = location.pathname.endsWith('dynamics');\n\n  useEffect(() => {\n    if (location.pathname.endsWith('transactions')) {\n      isLoggedIn && dispatch(getTransaction(changedDateForApi(selectedDate)));\n    }\n    if (location.pathname.endsWith('categories')) {\n      isLoggedIn &&\n        dispatch(getCategoriesStat(changedDateForApi(selectedDate)));\n    }\n    if (location.pathname.endsWith('dynamics')) {\n      isLoggedIn &&\n        dispatch(getDynamicsByMonth(changedDateForApi(selectedDate)));\n    }\n  }, [isLoggedIn, dispatch, location.pathname, selectedDate]);\n\n  const changedDateForPicker = newDate => {\n    const month = newDate.getMonth();\n    const year = newDate.getFullYear();\n    return `${months[month]}, ${year}`;\n  };\n\n  const changedDateForApi = newDate => {\n    const month = newDate.getMonth();\n    const year = newDate.getFullYear();\n    return { year, month: month + 1 };\n  };\n\n  const handleCloseCalendar = date => {\n    if (location.pathname.endsWith('transactions')) {\n      dispatch(getTransaction(changedDateForApi(date)));\n    }\n    if (location.pathname.endsWith('categories')) {\n      dispatch(getCategoriesStat(changedDateForApi(date)));\n    }\n    if (isDynamicsPage) {\n      dispatch(getDynamicsByMonth(changedDateForApi(date)));\n    }\n  };\n\n  return (\n    <div\n      className={clsx('calendarWrap', isDynamicsPage && 'calendarDynamicsWrap')}\n    >\n      <DatePicker\n        selected={selectedDate}\n        onChange={date => setSelectedDate(date)} // используем setSelectedDate, чтобы обновлять значение выбранной даты\n        value={changedDateForPicker(selectedDate)}\n        onCalendarClose={() => handleCloseCalendar(selectedDate)}\n        maxDate={new Date()}\n        dateFormat=\"MM/yyyy\"\n        showMonthYearPicker\n      />\n      <Icon\n        name={!isDynamicsPage ? 'icon-calendar' : 'icon-vector-down'}\n        width={'24'}\n        height={'24'}\n        className={'icon-calendar'}\n        secondaryClassName={'icon-claendar-dynamics'}\n      />\n    </div>\n  );\n};\n\nexport default DateComp;\n","// extracted by mini-css-extract-plugin\nexport default {\"vectorImg\":\"Section_vectorImg__zw3S9\"};","import s from './Section.module.scss';\n\nconst Section = ({ children }) => {\n  return <section className={s.vectorImg}>{children}</section>;\n};\n\nexport default Section;\n","// extracted by mini-css-extract-plugin\nexport default {\"statWrapp\":\"StatisticsPage_statWrapp__owdQz\",\"navWrapper\":\"StatisticsPage_navWrapper__o+Wo+\",\"navThumb\":\"StatisticsPage_navThumb__2sawr\",\"link\":\"StatisticsPage_link__zUktx\",\"active\":\"StatisticsPage_active__DfVns\",\"calendarWrapper\":\"StatisticsPage_calendarWrapper__+n5Db\"};","import Container from 'components/Container/Container';\nimport DateComp from 'components/DateComp/DateComp';\nimport { NavLink, Outlet } from 'react-router-dom';\nimport s from './StatisticsPage.module.scss';\nimport Section from 'components/Section/Section';\nimport Loader from 'components/Loader/Loader';\nimport { useSelector } from 'react-redux';\nimport { selectedIsLoading } from 'redux/transactions/transactionsSelector';\n\nconst StatisticsPage = () => {\n  const isLoading = useSelector(selectedIsLoading);\n  return (\n    <>\n      {isLoading && <Loader />}\n      <Section>\n        <Container>\n          <div className={s.statWrapp}>\n            <div className={s.navWrapper}>\n              <div>\n                <ul className={s.navThumb}>\n                  <li>\n                    <NavLink\n                      to=\"transactions\"\n                      end\n                      className={({ isActive }) =>\n                        isActive ? s.active : s.link\n                      }\n                    >\n                      Expenses\n                    </NavLink>\n                  </li>\n                  <li>\n                    <NavLink\n                      className={({ isActive }) =>\n                        isActive ? s.active : s.link\n                      }\n                      to=\"categories\"\n                    >\n                      Categories\n                    </NavLink>\n                  </li>\n                </ul>\n              </div>\n              <div className={s.calendarWrapper}>\n                <DateComp />\n              </div>\n            </div>\n              <Outlet />\n          </div>\n        </Container>\n      </Section>\n    </>\n  );\n};\n\nexport default StatisticsPage;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectedTransactions = state => state.statistics.transactions;\nexport const selectedCategoriesStat = state => state.statistics.categoriesStat;\nexport const selectedIsLoading = state => state.statistics.isLoading;\nexport const selectedError = state => state.statistics.error;\n\nexport const selectedChengedCategoriesStat = createSelector(\n  [selectedCategoriesStat],\n  categoriesStat => {\n    const totalSpend = categoriesStat.reduce(\n      (acc, item) => acc + item.amount,\n      0\n    );\n    const updatedCategoriesStat = categoriesStat.map(category => {\n      return {\n        ...category,\n        percentage: ((category.amount / totalSpend) * 100).toFixed(1),\n      };\n    });\n    return updatedCategoriesStat;\n  }\n);\n"],"names":["months","dispatch","useDispatch","useState","Date","selectedDate","setSelectedDate","isLoggedIn","useSelector","selectorIsLoggedIn","location","useLocation","isDynamicsPage","pathname","endsWith","useEffect","getTransaction","changedDateForApi","getCategoriesStat","getDynamicsByMonth","newDate","month","getMonth","year","getFullYear","className","clsx","selected","onChange","date","value","changedDateForPicker","onCalendarClose","maxDate","dateFormat","showMonthYearPicker","Icon","name","width","height","secondaryClassName","children","s","isLoading","selectedIsLoading","Loader","Section","Container","to","end","isActive","DateComp","selectedTransactions","state","statistics","transactions","selectedChengedCategoriesStat","createSelector","categoriesStat","totalSpend","reduce","acc","item","amount","map","category","percentage","toFixed"],"sourceRoot":""}